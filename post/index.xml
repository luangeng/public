<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 计算机与软件技术公开课</title>
    <link>https://luangeng.space/post/</link>
    <description>Recent content in Posts on 计算机与软件技术公开课</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2018. All rights reserved.</copyright>
    <lastBuildDate>Mon, 09 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://luangeng.space/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 介绍</title>
      <link>https://luangeng.space/post/go/basic/Intro/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Intro/</guid>
      <description>Go(又称Golang)是Google开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。 罗伯特·格瑞史莫(Robert Gr</description>
    </item>
    
    <item>
      <title>Go 安装</title>
      <link>https://luangeng.space/post/go/basic/install/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/install/</guid>
      <description>Windows系统下安装和设置 安装 从 https://golang.org/dl/ 下载.msi包并运行即可 设置 安装完成后，你需要配置GOPATH环境变量。从Go 1.8开始，GOPATH</description>
    </item>
    
    <item>
      <title>Go基本数据类型</title>
      <link>https://luangeng.space/post/go/basic/Types/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Types/</guid>
      <description>bool bool类型的值可以是true或false，初始为false var b bool = true fmt.Printf(&amp;quot;b is: &#39;%v&#39;\n&amp;quot;, b) b = false fmt.Printf(&amp;quot;b is: &#39;%v&#39;\n&amp;quot;, b) var b2 bool fmt.Printf(&amp;quot;zero value of bool is: &#39;%v&#39;\n&amp;quot;, b2) b is: &amp;lsquo;true&amp;rsquo; b is: &amp;lsquo;false&amp;rsquo; zero value of bool is: &amp;lsquo;false&amp;rsquo; b</description>
    </item>
    
    <item>
      <title>Go 变量</title>
      <link>https://luangeng.space/post/go/basic/Variables/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Variables/</guid>
      <description>Go中声明变量有以下几种方式: // 声明单个顶层变量 var topLevel int64 = 5 // 组合声明多个变量 var ( intVal int // 初始化为其零值 str string = &amp;quot;str&amp;quot; // assigning // functions are first-class values so can be assigned to variables // fn is</description>
    </item>
    
    <item>
      <title>Go 常量</title>
      <link>https://luangeng.space/post/go/basic/Constants/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Constants/</guid>
      <description>Go支持character, string,boolean和数字型的常量. 常量基本使用: // Greeting是public的string常量 const Greeting</description>
    </item>
    
    <item>
      <title>Go 字符串</title>
      <link>https://luangeng.space/post/go/basic/string/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/string/</guid>
      <description>go中的string是不可变的byte序列 Unlike languages like Python or Java, they are not internally represented as Unicode. Consequently, when reading strings from files or network connections, there is no conversion step from bytes to internal representation. When writing strings to files, there is no conversion to a code page. 与Pyt</description>
    </item>
    
    <item>
      <title>Go 指针</title>
      <link>https://luangeng.space/post/go/basic/Pointers/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Pointers/</guid>
      <description>指向变量的指针是该变量在内存中的地址。 Go不允许进行指针运算,不能在指针上加减。 指针的零值为nil。 指针使用示例： v := 5 // pv是指向v的指针</description>
    </item>
    
    <item>
      <title>Go 数组</title>
      <link>https://luangeng.space/post/go/basic/array/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/array/</guid>
      <description>Go中的数组是相同类型元素的有序集合。数组的长度是固定不变的,不能扩展,因此比较少用.大部分情况下我们可以使用slice,它的长度可以扩大和</description>
    </item>
    
    <item>
      <title>Go 切片</title>
      <link>https://luangeng.space/post/go/basic/slice/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/slice/</guid>
      <description>切片是相同类型的值的可增长序列。 其他语言称它们为数组或向量。 slice使用的内存由固定大小的数组提供。 切片是对该数组的视图。 切片具有长度和容</description>
    </item>
    
    <item>
      <title>Go map类型</title>
      <link>https://luangeng.space/post/go/basic/Map/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Map/</guid>
      <description>map是无序的key-value对的集合. map的零值为nil map在其他语言中称为字典(C#, Python)或hash表(C++). map</description>
    </item>
    
    <item>
      <title>Go struct类型</title>
      <link>https://luangeng.space/post/go/basic/struct/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/struct/</guid>
      <description>struct的作用是将几个相关的变量组合成一个独立的实体. 另外,struct可以有方法,如同Java和C++中的类. 不同于Java和C++中</description>
    </item>
    
    <item>
      <title>Go 接口</title>
      <link>https://luangeng.space/post/go/basic/Interface/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Interface/</guid>
      <description>接口在类型上定义了一组方法。 接口用于抽象行为。 在Go中，接口只是一组方法。 我们使用接口来指定某个对象的行为。 例如：标准库中定义的io.Rea</description>
    </item>
    
    <item>
      <title>Go 判断</title>
      <link>https://luangeng.space/post/go/basic/Ifswitchgoto/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Ifswitchgoto/</guid>
      <description>if 使用if进行基本的条件判断, 基本使用示例: a := 5 b := 6 if a == b { fmt.Print(&amp;quot;a is equal to b\n&amp;quot;) } else { fmt.Print(&amp;quot;a is not equal to b\n&amp;quot;) } a is not equal to b func returnValues(ok bool) (int, bool) { return 5, ok } func main() { a := 5</description>
    </item>
    
    <item>
      <title>Go 循环</title>
      <link>https://luangeng.space/post/go/basic/Loop/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Loop/</guid>
      <description>Go中只有for循环,for循环的完整形式如下: for i := 0; i &amp;lt; 5; i += 2 { fmt.Printf(&amp;quot;i: %d\n&amp;quot;, i) } i: 0 i: 2 i: 4 for循环中的每个部分都不是必须的 比如没有初始化:</description>
    </item>
    
    <item>
      <title>Go range</title>
      <link>https://luangeng.space/post/go/basic/Range/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Range/</guid>
      <description>遍历字符串 s := &amp;quot;Hey 世界&amp;quot; for i, r := range s { fmt.Printf(&amp;quot;idx: %d, rune: %d\n&amp;quot;, i, r) } idx: 0, rune: 72 idx: 1, rune: 101 idx: 2, rune: 121 idx: 3, rune: 32 idx: 4, rune: 19990 idx: 7, rune: 30028 请注意，范围假定字符串是UTF-</description>
    </item>
    
    <item>
      <title>Go 函数</title>
      <link>https://luangeng.space/post/go/basic/Functions/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Functions/</guid>
      <description>基本函数示例: // addCheckOverflow 完成2个int16相加,并且额外返回是否溢出 func addCheckOverflow(a, b uint16) (uint16, bool) { res := a + b overflowed := res &amp;lt; a || res &amp;lt; b return res, overflowed } func main() { res, overflowed := addCheckOverflow(1, 3) fmt.Printf(&amp;quot;%5d + %5d = %5d, overflowed:</description>
    </item>
    
    <item>
      <title>Go 方法</title>
      <link>https://luangeng.space/post/go/basic/Methods/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Methods/</guid>
      <description>方法是绑定到类型的函数, 任何类型都可以绑定函数,但大多数情况下绑定到struct, 此时和Java或C++中的类相似 方法基本例子: type Person struct { FirstName string</description>
    </item>
    
    <item>
      <title>Go 错误处理</title>
      <link>https://luangeng.space/post/go/basic/Error-handling/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Error-handling/</guid>
      <description>基本错误处理: func sqrt(n float64) (float64, error) { if n &amp;lt; 0 { return 0, fmt.Errorf(&amp;quot;invalid argument &#39;%f&#39;, must be &amp;gt;= 0&amp;quot;, n) } return math.Sqrt(n), nil } func printSqrt(n float64) { if res, err := sqrt(n); err == nil { fmt.Printf(&amp;quot;sqrt of %f is %f\n&amp;quot;, n, res) } else { fmt.Printf(&amp;quot;sqrt of %f returned error &#39;%s&#39;\n&amp;quot;, n, err) } } func main() { printSqrt(16)</description>
    </item>
    
    <item>
      <title>Go Defer</title>
      <link>https://luangeng.space/post/go/basic/Defer/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Defer/</guid>
      <description>使用复杂的函数的时候很容易忘记释放资源(例如关闭文件句柄或解锁互斥锁) Go提供了defer语句,将释放资源的代码放置在与获取该资源的代码后面</description>
    </item>
    
    <item>
      <title>Go Panic和recover</title>
      <link>https://luangeng.space/post/go/basic/Panic-recover/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Panic-recover/</guid>
      <description>本章假定你已经掌握了defer。 在Go中，panic和recover在技术上类似于C＃，Java或Python等语言中的异常处理。 panic</description>
    </item>
    
    <item>
      <title>Go 并发</title>
      <link>https://luangeng.space/post/go/basic/Concurrency/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Concurrency/</guid>
      <description>Go使用goroutines实现并发. 简单来说goroutines就像线程. Gorutines独立执行并且共享内存. 由于goroutines</description>
    </item>
    
    <item>
      <title>Go channel和select</title>
      <link>https://luangeng.space/post/go/basic/Channels-select/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Channels-select/</guid>
      <description>channel是给定类型的值的线程安全队列, channel的最大用途是goroutines之间进行通信。 goroutines通信时使用ch&amp;</description>
    </item>
    
    <item>
      <title>Go Mutex</title>
      <link>https://luangeng.space/post/go/basic/Mutex/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Mutex/</guid>
      <description>Go语言中goroutines共享内存. 这对性能有好处，但是从多个goroutine修改相同的内存并不安全。可能导致数据争用和崩溃。 避免这种</description>
    </item>
    
    <item>
      <title>Go 包管理</title>
      <link>https://luangeng.space/post/go/basic/Packages/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Packages/</guid>
      <description>Go中的包代表了相关联的代码的单位,在其他语言中经常称为库. 包由一个目录下的多个文件组成.这个目录和包是一对一映射的. 一个仓库中可以包含多个</description>
    </item>
    
    <item>
      <title>Go 文件和I/O</title>
      <link>https://luangeng.space/post/go/basic/File/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/File/</guid>
      <description>Go对文件操作的支持很健壮. 下面的程序打开,读取并关闭了一个文件: path := &amp;quot;main.go&amp;quot; f, err := os.Open(path) if err != nil { log.Fatalf(&amp;quot;os.Open() failed with %s\n&amp;quot;, err) } defer f.Close() d, err := ioutil.ReadAll(f) if err != nil { log.Fatalf(&amp;quot;ioutil.ReadAll() failed with &#39;%s&#39;\n&amp;quot;, err) } lines :=</description>
    </item>
    
    <item>
      <title>Go 日期和时间</title>
      <link>https://luangeng.space/post/go/basic/Time-date/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Time-date/</guid>
      <description>Go时间包提供了处理时间和日期的功能。 包中的主要类型： 结构time.Time表示了时间和日期的值 time.Duration 代表了时间差,单位为nanoseconds</description>
    </item>
    
    <item>
      <title>Go 解析命令行参数</title>
      <link>https://luangeng.space/post/go/basic/Command-line-arguments/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Command-line-arguments/</guid>
      <description>标准库中的flag包用于解析命令行参数： var ( flgHelp bool flgEcho string ) func parseCmdLineFlags() { flag.BoolVar(&amp;amp;flgHelp, &amp;quot;help&amp;quot;, false, &amp;quot;if true, show help&amp;quot;) flag.StringVar(&amp;amp;flgEcho, &amp;quot;echo&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;) flag.Parse() } func main() { parseCmdLineFlags() if flgHelp { flag.Usage() os.Exit(0) } fmt.Printf(&amp;quot;flag -echo: &#39;%s&#39;\n&amp;quot;, flgEcho) remainingArgs := flag.Args() for _, arg := range remainingArgs { fmt.Printf(&amp;quot;Remainig arg: &#39;%s&#39;\n&amp;quot;,</description>
    </item>
    
    <item>
      <title>Go 日志</title>
      <link>https://luangeng.space/post/go/basic/Logging/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Logging/</guid>
      <description>日志记录是一个非常深入的主题，因为不同的程序具有不同的日志记录要求。 使用fmt.Printf 和 fmt.Fprintf打印日志 日志的一种简单方</description>
    </item>
    
    <item>
      <title>Go 执行命令</title>
      <link>https://luangeng.space/post/go/basic/Executing-commands/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Executing-commands/</guid>
      <description>标准库中的Package exec是一种跨平台的方式来启动流程，捕获其输出以及更多。 基本命令执行 最简单的用法是：使用exec.Command(</description>
    </item>
    
    <item>
      <title>Go Hex和 base64编码</title>
      <link>https://luangeng.space/post/go/basic/Hex-base64-encoding/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Hex-base64-encoding/</guid>
      <description>有时候你需要将bytes编码非文本text. Most popular encodings are hex, where each byte is represented by 2 characters and base64 where each 3 bytes are encoded as 4 characters. Hex编码和解码 我们可以把[]byte编码为st</description>
    </item>
    
    <item>
      <title>Go JSON</title>
      <link>https://luangeng.space/post/go/basic/JSON/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/JSON/</guid>
      <description>encoding/json包是Go的标准库,提供JSON格式的序列化和反序列化功能. 序列化struct为JSON type Person struct { fullName string Name string Age int `json:&amp;quot;age&amp;quot;` City string `json:&amp;quot;city&amp;quot;`</description>
    </item>
    
    <item>
      <title>Go XML</title>
      <link>https://luangeng.space/post/go/basic/XML/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/XML/</guid>
      <description>Package encoding/xml in standard library provides functionality for serializing data as XML and parsing XML.
Parse XML into a struct Parsing XML is similar to parsing JSON. You define structures that map to the structure of XML and unmarshal from []byte slice or io.Reader into a struct.
var xmlStr = ` JohnSan FranciscoCA&amp;lt;person age=&amp;quot;23&amp;quot;&amp;gt; &amp;lt;first-name&amp;gt;Julia&amp;lt;/first-name&amp;gt; &amp;lt;/person&amp;gt;  `
type People struct { Person []Person xml:&amp;quot;person&amp;quot; }
type Person struct { Age int xml:&amp;quot;age,attr&amp;quot; FirstName string xml:&amp;quot;first-name&amp;quot; Address Address xml:&amp;quot;address&amp;quot; }</description>
    </item>
    
    <item>
      <title>Go CSV</title>
      <link>https://luangeng.space/post/go/basic/CSV/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/CSV/</guid>
      <description>标准库中的encoding/csv包提供了用于读取和写入CSV文件的功能。 从CSV文件读取记录 让我们从CSV文件中读取股票报价： date,open,high,low,close,volume,Name 2013-02-08,15.07,15.12,14.63,14.75,8407500,AAL 2013-02-11,14.89,15.01,14.26,14.46,8882000,AAL 2013-02-12,14.45,14.51,14.1,14.27,8126000,AAL 2013-02-13,14.3,14.94,14.25,14.66,10259500,AAL buf</description>
    </item>
    
    <item>
      <title>Go YAML</title>
      <link>https://luangeng.space/post/go/basic/YAML/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/YAML/</guid>
      <description>YAML是一种流行的格式，用于以人类友好的格式序列化数据, 类似JSON但更易于阅读。 由于其表达能力和可读性，YAML作为配置文件的格式很受欢</description>
    </item>
    
    <item>
      <title>Go SQL</title>
      <link>https://luangeng.space/post/go/basic/SQL/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/SQL/</guid>
      <description>备注 有关SQL数据库驱动程序的列表，请参见Go Wiki官方文章SQLDrivers。 SQL驱动程序被导入并以_作为前缀，因此它们仅可用于驱动</description>
    </item>
    
    <item>
      <title>Go HTTP Client</title>
      <link>https://luangeng.space/post/go/basic/HTTP-Client/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/HTTP-Client/</guid>
      <description>标准库中的net / http软件包提供了发出HTTP网络请求的功能。 在示例中，我们使用httpbin.org这是一个聪明的服务，可以返回特定的</description>
    </item>
    
    <item>
      <title>Go HTTP Server</title>
      <link>https://luangeng.space/post/go/basic/HTTP-Server/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/HTTP-Server/</guid>
      <description>Hello World 开始使用Go编写Web服务器的典型方法是使用标准库中的net/http模块。 如下代码是最简单的HTTP服务器实现,它对任何HTTP请求都</description>
    </item>
    
    <item>
      <title>Go HTTP server middleware</title>
      <link>https://luangeng.space/post/go/basic/Middleware/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Middleware/</guid>
      <description>介绍 在Go中，中间件可用于在处理程序函数之前和之后执行代码。 它使用单功能接口的能力。可以随时引入而不会影响其他中间件。对于如身份验证日志功能</description>
    </item>
    
    <item>
      <title>Go Text和HTML模板</title>
      <link>https://luangeng.space/post/go/basic/Text-HTML-templates/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Text-HTML-templates/</guid>
      <description>Imagine you’re working on a web application and need to return HTML that lists most recent tweets. You need to load list of tweets from a database and create HTML based on that information. Building that HTML string by building smaller strings and concatenating them with + would be tedious. Packages text/template and html/template in Go standard library make implement data-driven templates for generating textual</description>
    </item>
    
    <item>
      <title>Go 反射</title>
      <link>https://luangeng.space/post/go/basic/Reflection/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Reflection/</guid>
      <description>Go是一种静态类型的语言。 在大多数情况下，变量的类型在编译时是已知的。接口类型是一种例外，尤其是空接口interface {}。 空接口是一种动</description>
    </item>
    
    <item>
      <title>Go Context</title>
      <link>https://luangeng.space/post/go/basic/Context/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Context/</guid>
      <description>标准库中的context包提供了Context类型，它有多种用途。 下面是context.Context几个典型用法: 带超时（截止时间）的上下</description>
    </item>
    
    <item>
      <title>Go 测试</title>
      <link>https://luangeng.space/post/go/basic/Testing/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Testing/</guid>
      <description>Go带有自己的测试功能，具有运行测试和基准所需的一切。 与大多数其他编程语言不同，尽管存在一些测试框架，但通常不需要单独的测试框架。 基本使用 main.go:</description>
    </item>
    
    <item>
      <title>Go Calling C from GO with cgo</title>
      <link>https://luangeng.space/post/go/basic/Calling-C-from-GO-with-cgo/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Calling-C-from-GO-with-cgo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go 使用Go工具pprof进行性能分析</title>
      <link>https://luangeng.space/post/go/basic/Pprof/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Pprof/</guid>
      <description>基本的cpu和内存分析 在主程序中添加以下代码。 var cpuprofile = flag.String(&amp;quot;cpuprofile&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;write cpu profile `file`&amp;quot;) var memprofile = flag.String(&amp;quot;memprofile&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;write memory profile to `file`&amp;quot;) func main() { flag.Parse() if *cpuprofile != &amp;quot;&amp;quot; { f, err := os.Create(*cpuprofile) if err != nil { log.Fatal(&amp;quot;could not create CPU profile: &amp;quot;, err) } if err</description>
    </item>
    
    <item>
      <title>Go 交叉编译</title>
      <link>https://luangeng.space/post/go/basic/Cross-compilation/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Cross-compilation/</guid>
      <description>Go compiler can create native executable binaries for many operating system: Windows, Mac OS X, Linux, Android, iOS and a few lesser known like plan9, solaris, freebsd, openbsd, netbsd, dragonfly. It also supports multiple architectures (CPUs) for the same operating system e.g. it can generate both 32-bit and 64-bit Windows binaries or intel, arm, ppc, mips Linux binaries. Better yet, the toolchain supports cross-compilation i.e. you can create a Linux</description>
    </item>
    
    <item>
      <title>Go 使用构建标签进行条件编译</title>
      <link>https://luangeng.space/post/go/basic/Conditional-compilation/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Conditional-compilation/</guid>
      <description>build tag允许进行有限的条件编译，即根据某些条件编译不同版本的代码。 Tags are specified per file, at the top of the file, followed by an empty line and the code. A typical use case for tags is to provide to implementation of the same functionality and pick the</description>
    </item>
    
    <item>
      <title>Go Inlining functions</title>
      <link>https://luangeng.space/post/go/basic/Inlining-functions/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Inlining-functions/</guid>
      <description>函数内联是用于提高代码性能的常见编译器优化。 经常调用的小函数可以直接包含（内联）在调用函数的主体中。 这消除了函数调用开销。 Go编译器没有提供</description>
    </item>
    
    <item>
      <title>Go 使用sync.Pool提高性能</title>
      <link>https://luangeng.space/post/go/basic/Sync.Pool/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Sync.Pool/</guid>
      <description>高频分配和释放对象可能相对昂贵。 提高性能的常用技术是重复使用内存。 sync.Pool是用于复用分配的线程安全缓存。 package main import ( &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; ) var pool = sync.Pool{ //</description>
    </item>
    
    <item>
      <title>Go gob</title>
      <link>https://luangeng.space/post/go/basic/gob/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/gob/</guid>
      <description>Gob是Go特定的序列化方法，主要为RPC（远程过程调用）创建。 它支持除通道和函数之外的所有Go数据类型。 Gob将类型信息写入序列化数据中。</description>
    </item>
    
    <item>
      <title>Go 插件</title>
      <link>https://luangeng.space/post/go/basic/Plugin/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Plugin/</guid>
      <description>Go提供了一种插件机制，可用于在运行时动态链接其他Go代码。 在Go1.8中，仅在Linux上可用。 定义和使用插件 package main import &amp;quot;fmt&amp;quot; var V int func F() { fmt.Printf(&amp;quot;Hello, number %d\n&amp;quot;, V)</description>
    </item>
    
    <item>
      <title>Go fmt包</title>
      <link>https://luangeng.space/post/go/basic/Fmt/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Fmt/</guid>
      <description>标准库中的fmt包可以格式化字符串和从字符串中解析数据. 基本的fmt 包fmt使用格式动词实现格式化的I/O： %v 默认格式 %T 值的类型 %s 字符串或片</description>
    </item>
    
    <item>
      <title>Go Protobuf</title>
      <link>https://luangeng.space/post/go/basic/Protobuf/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Protobuf/</guid>
      <description>介绍 Protobuf或协议缓冲区对数据进行编码和解码，以便以不同语言编写的不同应用程序或模块可以快速而可靠地交换大量消息，而不会导致通信通道</description>
    </item>
    
    <item>
      <title>Go Console I/O</title>
      <link>https://luangeng.space/post/go/basic/ConsoleIO/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/ConsoleIO/</guid>
      <description>编写命令行程序时，可以使用任何接受io.Reader的函数从os.Stdin中读取用户输入。 fmt.Scanf从stdio读取 最方便的方法是</description>
    </item>
    
    <item>
      <title>Go 加解密</title>
      <link>https://luangeng.space/post/go/basic/Cryptography/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Cryptography/</guid>
      <description>了解如何使用Go加密和解密数据。 请记住，这不是一门关于密码学的课程，而是一门用Go语言实现的课程。 使用AES GCM进行加密和解密 你有一个文件</description>
    </item>
    
    <item>
      <title>Go 图像</title>
      <link>https://luangeng.space/post/go/basic/Images/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Images/</guid>
      <description>图像标准库为处理图像提供了基础。 image包提供了: image.Image接口描述位图图像 一种最常见的表示内存中图像的方式的实现，例如Ima</description>
    </item>
    
    <item>
      <title>Go 命令</title>
      <link>https://luangeng.space/post/go/basic/Command/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/go/basic/Command/</guid>
      <description>go命令是一个命令行程序，用于管理Go开发。 它支持构建，运行和测试代码，以及各种其他与Go相关的任务。 go fmt 为了保持代码的一致性并消除代码格式</description>
    </item>
    
    <item>
      <title>爬取电影信息使用Elasticsearch检索</title>
      <link>https://luangeng.space/post/other/elasticsearch-douban/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/elasticsearch-douban/</guid>
      <description>爬虫代码源于网络,修改其中的数据库操作为ES数据访问. 实体类: 爬取记录: @Data public class Record { public static final String TYPE_MOVIE = &amp;quot;Movie&amp;quot;; public static final String TYPE_COMMENT = &amp;quot;Comment&amp;quot;; public static final String TYPE_OTHER = &amp;quot;Other&amp;quot;; public static final int STATUS_UNCRAWLED = 0; public</description>
    </item>
    
    <item>
      <title>elasticsearch JAVA API</title>
      <link>https://luangeng.space/post/other/elasticsearch-api/</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/elasticsearch-api/</guid>
      <description>@Service public class DocApi implements Const { @Autowired RestHighLevelClient client; public void info() throws IOException { MainResponse response = client.info(RequestOptions.DEFAULT); ClusterName clusterName = response.getClusterName(); String clusterUuid = response.getClusterUuid(); String nodeName = response.getNodeName(); Version version = response.getVersion(); Build build = response.getBuild(); } public IndexResponse index(int n) throws IOException { IndexRequest request = new IndexRequest(INDEX, TYPE, &amp;quot;1&amp;quot;) .source(&amp;quot;user&amp;quot;, &amp;quot;kimchy&amp;quot;, &amp;quot;postDate&amp;quot;, new Date(), &amp;quot;message&amp;quot;, &amp;quot;trying out Elasticsearch&amp;quot;); IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT); //</description>
    </item>
    
    <item>
      <title>elasticsearch入门教程</title>
      <link>https://luangeng.space/post/other/elasticsearch/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/elasticsearch/</guid>
      <description>ElasticSearch是全文搜索最常见的开源工具，它支持快速存储，检索大量数据。 基本概念: Node 与 Cluster Elastic 本质上是一个分布式数据库，允许多台服务</description>
    </item>
    
    <item>
      <title>SpringBoot集成ZeroMQ</title>
      <link>https://luangeng.space/post/other/zeromq-springboot/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/zeromq-springboot/</guid>
      <description>开发ZeroMQ的SpringBoot Starter。 resources中META-INF中增加文件spring.factories： org.springframework.boot.autoconfigure.EnableAutoConfiguration=net.ytoframework.plugin.zeromq.ZeroMQAutoConfiguration 配置</description>
    </item>
    
    <item>
      <title>集成通过github登录网站功能</title>
      <link>https://luangeng.space/post/other/github_login/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/github_login/</guid>
      <description>使用第三方网址登录系统，使用github 工作流程： 页面点击使用github登录， 重定向到回调地址 回调地址后台获取token，获取用户信息，完</description>
    </item>
    
    <item>
      <title>Oauth2协议 通过js和ajax获取token及刷新token</title>
      <link>https://luangeng.space/post/other/token-front/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/token-front/</guid>
      <description>基于Oauth2.0协议授权码模式的认证流程 授权码模式工作流程： 浏览器访问某个受保护的资源，客户端自动将网页重定向到认证服务器(/oauth</description>
    </item>
    
    <item>
      <title>SpringBoot集成elastic-job-lite</title>
      <link>https://luangeng.space/post/other/elasticJob/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/elasticJob/</guid>
      <description>SpringBoot集成elastic-job-lite 1.pom文件中引用jar包 &amp;lt;!-- elastic-job-lite --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-common-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-lite-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-lite-spring&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;18.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2.本地启</description>
    </item>
    
    <item>
      <title>spring-security-oauth2 授权服务集成钉钉扫码登录</title>
      <link>https://luangeng.space/post/other/dingding/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/dingding/</guid>
      <description>spring boot版本 &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.2.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; spring-security-oauth2版本 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security.oauth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-oauth2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 实现原理： 参照spring-security</description>
    </item>
    
    <item>
      <title>如何制作一个漂亮的生日祝福网页</title>
      <link>https://luangeng.space/post/other/birthday/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/birthday/</guid>
      <description>本文演示如何制作一个精美的生日祝福网页，可在手机端查看，首先看一下最终效果： Your browser does not support the audio element.预览图片： 开始前 完成本教程需要以下</description>
    </item>
    
    <item>
      <title>Redis命令</title>
      <link>https://luangeng.space/post/db/redis/redis-command-string/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/db/redis/redis-command-string/</guid>
      <description>常用命令 APPEND key value 如果 key 已经存在，并且值为字符串，那么这个命令会把 value 追加到原来值(value)的结尾。 如果 key 不存在，那么它将首先创建一个空字符串</description>
    </item>
    
    <item>
      <title>Netty--使用TCP协议传输文件</title>
      <link>https://luangeng.space/post/java/netty/netty-file/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-file/</guid>
      <description>简介： 用于将文件通过TCP协议传输到另一台机器，两台机器需要通过网络互联。 实现： 使用Netty进行文件传输，服务端读取文件并将文件拆分为多个</description>
    </item>
    
    <item>
      <title>Netty--RPC的原理和实现</title>
      <link>https://luangeng.space/post/java/netty/netty-rpc/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-rpc/</guid>
      <description>RPC(Remote Procedure Call)远程过程调用，是通过网络调用远程计算机进程中的某个方法，从而达到获取和传递数据或状态的实现，调用风格就如同调用本地的方法一样。</description>
    </item>
    
    <item>
      <title>Netty--Google Protobuf编解码</title>
      <link>https://luangeng.space/post/java/netty/netty-protobuf/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-protobuf/</guid>
      <description>Google Protobuf是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储</description>
    </item>
    
    <item>
      <title>Netty--JDK序列化编解码传输对象</title>
      <link>https://luangeng.space/post/java/netty/netty-jdk/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-jdk/</guid>
      <description>使用JDK序列化不需要额外的类库，只需要实现Serializable即可，但是序列化之后的码流只有Java才能反序列化，所以它不是跨语言的，</description>
    </item>
    
    <item>
      <title>Netty--HTTP服务器原理和实现</title>
      <link>https://luangeng.space/post/java/netty/netty-http/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-http/</guid>
      <description>基于Netty的HTTP协议栈可以方便的进行异步非阻塞的HTTP服务器的开发。 当在浏览器中输入一个指向特定网页的URL时，浏览器就会生成一个</description>
    </item>
    
    <item>
      <title>Netty--TCP粘包和拆包</title>
      <link>https://luangeng.space/post/java/netty/netty-tcpdecoder/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-tcpdecoder/</guid>
      <description>TCP协议以流的方式进行数据传输，它无法理解其上层协议的数据意义，而是根据TCP缓冲区的大小对数据进行拆分或组装，即上层一个完整的包可能被拆</description>
    </item>
    
    <item>
      <title>Netty--TCP协议发送和接收数据</title>
      <link>https://luangeng.space/post/java/netty/netty-tcp/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-tcp/</guid>
      <description>Netty是业界最流行的NIO开发框架，使用Netty可以构建高性能异步通信能力，经常用于RPC底层通信框架。Netty的API使用简单，功</description>
    </item>
    
    <item>
      <title>Netty--简单实现一个Servlet容器</title>
      <link>https://luangeng.space/post/java/netty/netty-servlet/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-servlet/</guid>
      <description>Servlet(Server Applet)是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语</description>
    </item>
    
    <item>
      <title>jQuery事件</title>
      <link>https://luangeng.space/post/other/jquery-event/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/jquery-event/</guid>
      <description>blur() 触发或绑定blur事件。 $(&amp;quot;input&amp;quot;).blur(function(){ $(&amp;quot;input&amp;quot;).css(&amp;quot;background-color&amp;quot;,&amp;quot;#D6D6FF&amp;quot;); }); change() 触发或绑定change事件, 该事件仅适用于文本域(text field)，以及 textarea 和 select 元素。 $(&amp;quot;.field&amp;quot;).change(function(){ $(this).css(&amp;quot;background-color&amp;quot;,&amp;quot;#FFFFCC&amp;quot;); }); click() 触发或绑定</description>
    </item>
    
    <item>
      <title>Spring Cloud Bus-RabbitMQ</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-rabbitmq/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-rabbitmq/</guid>
      <description>Spring Cloud Bus将分布式系统中各节点通过轻量级消息代理连接起来。 从而实现例如广播状态改变(例如配置改变)或其他的管理指令。 目前唯一的实现是使用AM</description>
    </item>
    
    <item>
      <title>HTML5 canvas绘图</title>
      <link>https://luangeng.space/post/other/html5-cavas/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/html5-cavas/</guid>
      <description>HTML5 canvas画图 示例1 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://libs.baidu.com/jquery/2.0.3/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;style.css&amp;quot; /&amp;gt; &amp;lt;title&amp;gt;Backpropagation&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;spr &amp;lt;div&amp;gt; &amp;lt;div style=&amp;quot;float:right;margin-right:400px;margin-top:100px;width:300px;height:500px&amp;quot;&amp;gt; &amp;lt;span id=&amp;quot;NN&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span id=&amp;quot;xyText&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt; &amp;lt;input id=&amp;quot;Text&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;&amp;lt;br&amp;gt; &amp;lt;button id=&amp;quot;clear&amp;quot; type=&amp;quot;button&amp;quot; onclick=&amp;quot;Clear()&amp;quot;&amp;gt;</description>
    </item>
    
    <item>
      <title>RocketMQ核心概念</title>
      <link>https://luangeng.space/post/other/rocketMq-Concept/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/rocketMq-Concept/</guid>
      <description>Producer A producer sends messages generated by the business application systems to brokers. RocketMQ provides multiple paradigms of sending: synchronous, asynchronous and one-way. 生产者将业务应用程序系统生成的消息发送给broker。RocketMQ提供多种发送范例：同步，</description>
    </item>
    
    <item>
      <title>Spring Cloud Zuul 网关</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-zuul/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-zuul/</guid>
      <description>Spring Cloud 服务网关Zuul 服务网关是分布式架构中不可缺少的组成部分，是外部网络和内部服务之间的屏障，例如权限控制之类的逻辑应该在这里实现，而不是放</description>
    </item>
    
    <item>
      <title>Spring MVC中Action使用总结</title>
      <link>https://luangeng.space/post/java/spring/springmvc/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/springmvc/</guid>
      <description>Spring MVC中每个控制器中可以定义多个请求处理方法即Action，Action可以有多个不同的参数，有多种类型的返回结果。 可以作为Action的</description>
    </item>
    
    <item>
      <title>AJAX，jQuery Ajax和Deferred</title>
      <link>https://luangeng.space/post/other/html5-ajax/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/html5-ajax/</guid>
      <description>AJAX全称为“Asynchronous JavaScript And XML”(异步JavaScript和XML)，是指一种创建交互式网页应用，改善用户体验，实现无刷</description>
    </item>
    
    <item>
      <title>Spring Cloud 断路器 Hystrix</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-hystrix/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-hystrix/</guid>
      <description>断路器 断路器就像电路中的断路器一样，当短路发生时，它第一时刻熔断，切断了故障电路，保护其他用电单元。 在分布式架构中，断路器的作用类似，当某个</description>
    </item>
    
    <item>
      <title>zookeeper-分布式锁和消息队列</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-lock/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-lock/</guid>
      <description>在java并发包中提供了若干锁的实现，它们是用于单个java虚拟机进程中的；而分布式锁能够在一组进程之间提供互斥机制，保证在任何时刻只有一个</description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://luangeng.space/post/other/linux-cmd/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/linux-cmd/</guid>
      <description>man 查询命令帮助 info 查询命令文档 whatis 查询命令简介 whereis 查询命令文件位置 which 查询命令运行位置 finger 显示用户的信息 who 显示当前登录用户 whoami 显示用户ID sudo 以管理员身份</description>
    </item>
    
    <item>
      <title>Spring Cloud Config 配置服务</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-eureka/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-eureka/</guid>
      <description>spring cloud 配置服务提供了一种非常方便的应用配置管理功能，用来解决分布式系统中配置文件太多导致的各种问题，而它自身的配置也非常简单。 服务端用来从gi</description>
    </item>
    
    <item>
      <title>zookeeper-集群管理</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-cluster/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-cluster/</guid>
      <description>Zookeeper&amp;ndash;集群管理 在多台服务器组成的集群中，需要监控每台服务器的状态，一旦某台服务器挂掉了或有新的机器加入集群，集群都</description>
    </item>
    
    <item>
      <title>Spring Cloud Eureka 注册，发布，调用服务</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-config/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-config/</guid>
      <description>Spring Cloud为服务治理做了一层抽象接口，所以在Spring Cloud应用中可以支持多种不同的服务治理框架，如Netflix Eureka、Co</description>
    </item>
    
    <item>
      <title>ubuntu 16.04安装redis-server</title>
      <link>https://luangeng.space/post/db/redis/redis-install/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/db/redis/redis-install/</guid>
      <description>ubuntu 16.04安装redis-server apt-get install redis-server 启动、停止、重启、重新加载、查看状态 /etc/init.d/redis-server start /etc/init.d/redis-server stop /etc/init.d/redis-server restart /etc/init.d/redis-server force-reload /etc/init.d/redis-server status 进入redis命令行 daemon启动程</description>
    </item>
    
    <item>
      <title>zookeeper-配置服务</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-config/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-config/</guid>
      <description>Zookeeper&amp;ndash;配置服务 配置服务是分布式应用中重要的服务，作用是使集群中的机器可以共享配置信息中公共的部分。ZooKeepe</description>
    </item>
    
    <item>
      <title>Spring Boot发布和调用RESTful web service</title>
      <link>https://luangeng.space/post/java/spring/spring-ws/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-ws/</guid>
      <description>Spring Boot可以非常简单的发布和调用RESTful web service，下面参考官方指导体验一下 1.首先访问 http://start.spring.io/ 生成Spring Boot基础项目 或者</description>
    </item>
    
    <item>
      <title>vim基本使用</title>
      <link>https://luangeng.space/post/other/linux-vim/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/linux-vim/</guid>
      <description>i 进入插入状态 esc 退出插入状态 x 删除一个字符 dd 删除一行，并拷贝 yy 拷贝 p 粘贴 u 撤销 ctrl+r 重做 :w 保存 :q 退出 :q! → 退出不保存</description>
    </item>
    
    <item>
      <title>zookeeper-Watcher</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-watch/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-watch/</guid>
      <description>Zookeeper&amp;ndash;Watcher 和 ACL Watcher (观察) Zookeeper中的znode可以被监控，这是zk的核心特性。 通过exists，getChildren和getData这些</description>
    </item>
    
    <item>
      <title>Mysql常用数据类型</title>
      <link>https://luangeng.space/post/db/mysql/mysql-type/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/db/mysql/mysql-type/</guid>
      <description>Mysql常用数据类型 数字： 字符串： 时间：</description>
    </item>
    
    <item>
      <title>zookeeper-Java API</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-java/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-java/</guid>
      <description>Zookeeper&amp;ndash;Java API及示例 zk客户端要连接zk服务器，首先需要创建org.apache.zookeeper.ZooKeeper的一个实例对象，然后调用该</description>
    </item>
    
    <item>
      <title>使用Spring Boot 和Spring Data JPA访问mysql数据库</title>
      <link>https://luangeng.space/post/java/spring/spring-jpa/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-jpa/</guid>
      <description>在Spring中使用JdbcTemplate是一种基本的数据访问方式，但是仍然需要较多的代码，为了解决这些大量枯燥的数据操作语句，我们可以使</description>
    </item>
    
    <item>
      <title>Mysql基础语法</title>
      <link>https://luangeng.space/post/db/mysql/mysql-sql/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/db/mysql/mysql-sql/</guid>
      <description>Mysql基础语法 SELECT VERSION(), CURRENT_DATE, now(); select user(); create database pets; show databases; use pets; CREATE TABLE cats ( id INT unsigned NOT NULL AUTO_INCREMENT, # Unique ID for the record name VARCHAR(150) NOT NULL, # Name of the cat owner VARCHAR(150) NOT NULL, # Owner of the cat birth DATE NOT NULL, # Birthday of the cat PRIMARY KEY (id) # Make</description>
    </item>
    
    <item>
      <title>Spring Boot 集成Swagger2生成RESTful API文档</title>
      <link>https://luangeng.space/post/java/spring/spring-swagger/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-swagger/</guid>
      <description>Swagger2可以在写代码的同时生成对应的RESTful API文档，方便开发人员参考，另外Swagger2也提供了强大的页面测试功能来调试</description>
    </item>
    
    <item>
      <title>zookeeper-安装及命令</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-cmd/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-cmd/</guid>
      <description>Zookeeper&amp;ndash;单机模式安装 及命令 下载地址： http://zookeeper.apache.org/releases.html tar -zxvf zookeeper-3.4.10.tar.gz mv zookeeper-3.4.10 /Users/LG/tools/zookeeper-3.4.10 cd /Users/LG/tools/zookeeper-3.4.10 conf目录下新建配置文件zoo.cfg，内容如下： # The number of milliseconds</description>
    </item>
    
    <item>
      <title>markdown简明语法</title>
      <link>https://luangeng.space/post/other/markdown/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/markdown/</guid>
      <description># markdown语法 * list * list 0. list 0. list `code` code 多行代码 { main{} } &amp;gt;1111(引用) &amp;gt;&amp;gt;222222 &amp;gt;&amp;gt;&amp;gt;33333 &amp;gt;&amp;gt;&amp;gt;&amp;gt;44444 **bold** [link](https://cn.bing.com/w) 链接 ![pic](/img/loading.gif) 图片 后面加三个空格换行... 第二行... ma</description>
    </item>
    
    <item>
      <title>Redis简介</title>
      <link>https://luangeng.space/post/db/redis/redis-intr/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/db/redis/redis-intr/</guid>
      <description>Redis(REmote DIctionary Server)是一个开源的基于内存数据结构的key-value存储系统，可用作数据库，缓存和消息代理。 它支持丰富的数据结构：字符串，散列</description>
    </item>
    
    <item>
      <title>Spring Boot自定义配置与加载</title>
      <link>https://luangeng.space/post/java/spring/spring-rest/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-rest/</guid>
      <description>Spring Boot自定义配置与加载 application.properties主要用来配置数据库连接、日志相关配置等。除了这些配置内容之外，还可以自</description>
    </item>
    
    <item>
      <title>ubuntu16.04安装rocketMQ</title>
      <link>https://luangeng.space/post/other/rocketmq/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/rocketmq/</guid>
      <description>本文详细说明如何在ubuntu16.04下安装rocketMQ的步骤。 首先需要打开root权限 sudo -i 下载安装jdk wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz tar -zxvf jdk-8u181-linux-x64.tar.gz mv jdk-8u181-linux-x64 /usr/jdk 配置JAVA</description>
    </item>
    
    <item>
      <title>zookeeper-基本概念</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-base/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-base/</guid>
      <description>介绍 ZooKeeper是用于分布式系统的高性能协调服务，通过简单的接口提供了命名服务，配置管理，同步和组服务等常用服务。 ZooKeeper是</description>
    </item>
    
    <item>
      <title>Maven安装配置使用</title>
      <link>https://luangeng.space/post/other/maven/</link>
      <pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/maven/</guid>
      <description>Maven介绍 Maven是一个项目管理工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Life</description>
    </item>
    
    <item>
      <title>MySql 存储过程</title>
      <link>https://luangeng.space/post/db/mysql/mysql-procedure/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/db/mysql/mysql-procedure/</guid>
      <description>存储过程(Stored Procedure)是一段SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数(如果带参数)来</description>
    </item>
    
    <item>
      <title>一文看懂@RequestBody,@RequestParam和@PathVariable</title>
      <link>https://luangeng.space/post/java/spring/spring-annotation/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-annotation/</guid>
      <description>在使用SpringMVC或Spring Boot开发后台应用的使用，经常需要从前台传值到后台，后台返回数据和页面到前台，而碰到最多的就是Spr</description>
    </item>
    
    <item>
      <title>CXF拦截器介绍及自定义拦截器实现</title>
      <link>https://luangeng.space/post/java/cxf-interceptor/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/cxf-interceptor/</guid>
      <description>CXF拦截器是功能的主要实现单元，也是主要的扩展点，可以在不对核心模块进行修改的情况下，动态添加功能。 当服务被调用时，会经过多个拦截器链(I</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程1-1</title>
      <link>https://luangeng.space/post/english/1-1/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/1-1/</guid>
      <description>Unit 1 Growing Up Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. Do you know who John Lennon was? 2. Have you ever heard the song before? 3. What does Lennon think of growing up? Is it easy or full of adventures? 4. Can you guess what the texts in this unit are going to be about? Part</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程1-2</title>
      <link>https://luangeng.space/post/english/1-2/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/1-2/</guid>
      <description>Unit 2 Friendship Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. Have you ever heard of Dionne Warwick? Have you happened to hear her sing? 2. What does a fair weather friend mean? 3. What does Dionne Warwick think friends are for? 4. Does the song give you any idea of what the stories in this unit will</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程1-3</title>
      <link>https://luangeng.space/post/english/1-3/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/1-3/</guid>
      <description>Unit 3 Understanding Science Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. Who is it about? 2. What questions interest him? 3. What makes his achievements so remarkable? Part II Text A Professor Hawking thinks it important to keep everybody in touch with what science is about. In this article he explains why. PUBLIC ATTITUDES TOWARD SCIENCE Whether</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程1-4</title>
      <link>https://luangeng.space/post/english/1-4/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/1-4/</guid>
      <description>Unit 4 American Dream Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. According to Dr. Hertz, what did the American Dream mean to his grandparents? 2. In Dr. Hertz&#39;s opinion, who wants people to believe in the American Dream? Why? 3. Why does Dr. Hertz say the American Dream is in one&#39;s head and in one&#39;s pocket? 4.</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程1-5</title>
      <link>https://luangeng.space/post/english/1-5/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/1-5/</guid>
      <description>Unit 5 Romance Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. Do you have a favorite love song? What is its name? Who is the singer? Can you sing or hum the tune? 2. What is the song you have just heard mainly about? 3. Do you think it appropriate to begin this unit with a love song?</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程1-6</title>
      <link>https://luangeng.space/post/english/1-6/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/1-6/</guid>
      <description>Unit 6 Animal Intelligence Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. What do you know about Michael Jackson? 2. How does he feel about Ben? Why? 3. Do you think the song Ben reveals something about the relationship between man and animals? If so, what is it? 4. Is the song related to the theme of the</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程1-7</title>
      <link>https://luangeng.space/post/english/1-7/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/1-7/</guid>
      <description>Unit 7 Emergency Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. How did the father understand courage at first? 2. What did courage mean to the father after the fire was put out? 3. The poet says that firemen fight a war they can never win. What does he mean? 4. How does courage as described in the</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程1-8</title>
      <link>https://luangeng.space/post/english/1-8/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/1-8/</guid>
      <description>Unit 8 Coping with an Educational Problem Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. What was the teacher&#39;s purpose in asking his class the riddle? 2. What can you learn about Little Geoffrey from his answer to the riddle? Was he used to trying to think clearly? Had he formed the habit of making good use of</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程2-1</title>
      <link>https://luangeng.space/post/english/2-1/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/2-1/</guid>
      <description>UNIT 1 Ways of Learning Part I Pre-Reading Task Listen to the recording two or three times and then think over the following questions: 1. Who should teach whom? Is learning a one-way street? 2. Should we share our dreams for a better life with our parents or keep them to ourselves? 3. Can children ever understand their parents completely? 4. From the song can you guess what the theme</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程2-2</title>
      <link>https://luangeng.space/post/english/2-2/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/2-2/</guid>
      <description>Unit 2 Text A The Richest Man In America, Down Home Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. Who is it about? 2. What happened to him one day? 3. Do you think it was worthwhile to walk two or three miles to pay back the six and a quarter cents? 4. Is the story related to</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程2-3</title>
      <link>https://luangeng.space/post/english/2-3/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/2-3/</guid>
      <description>Unit 2 Text A Father knows Better Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. What sort of a song is it? 2. Who should be sitting up and taking notice? Why? 3. What does the singer think of his parent&#39;s way of doing things? 4. Do you agree with what he says? Part II Text A This</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程2-4</title>
      <link>https://luangeng.space/post/english/2-4/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/2-4/</guid>
      <description>Unit 4 Text A A Virtual Life Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. Is the hero a student or an employee? 2. What was he doing when the boss came in? 3. How did he act in front of his boss? 4. Can you guess what the texts in this unit are going to be about?</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程2-5</title>
      <link>https://luangeng.space/post/english/2-5/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/2-5/</guid>
      <description>Unit 5 Text A True Height Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. What happened to the singer? 2. What helped her pull through all the hardships she suffered? 3. What is the tone of the song? 4. Is the song related to the theme of the unit overcoming obstacles? Part II Text A Look at the</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程2-6</title>
      <link>https://luangeng.space/post/english/2-6/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/2-6/</guid>
      <description>Unit 6 Text A I&#39;m Going To Buy The Brooklyn Bridge Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. Why can&#39;t women be ignored? 2. What price have women had to pay for their wisdom? 3. What happens to them if you try to break their will? 4. Have women realized their dreams? Part II Text A How</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程2-7</title>
      <link>https://luangeng.space/post/english/2-7/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/2-7/</guid>
      <description>Unit 7 Text A The Glorious Messiness Of English Text Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. What is the passage about? 2. What&#39;s your impression of the English language? 3. Can you give one or two examples to illustrate the messiness of the English language? 4. Can you guess what the texts in this unit are</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程2-8</title>
      <link>https://luangeng.space/post/english/2-8/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/2-8/</guid>
      <description>Unit 8 Text A Saving Nature, But Only For Man Part I Pre-reading Task Listen to the recording two or three times and then think over the following questions: 1. What kind of paradise is described in the song? 2. Why do people have to pay to see the trees? 3. What would happen if farmers continued to use DDT? 4. What is the theme of the song? Part II</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程3-1</title>
      <link>https://luangeng.space/post/english/3-1/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/3-1/</guid>
      <description>The song you are about to hear is all about taking a break from city life, escaping from the crowds, finding a quiet place, far from the human race. For those of us who live in cities, getting out in the country can provide a welcome break, letting us recharge our batteries2. Out in the country, as the song says, we can find a place to stand alone and take</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程3-2</title>
      <link>https://luangeng.space/post/english/3-2/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/3-2/</guid>
      <description>The song you are going to listen to is called Abraham, Martin &amp;amp; John, sung by Dion. Abraham, Martin &amp;amp; John Dion Has anybody here, Seen my old friend Abraham, Can you tell me, where he&#39;s gone, He freed a lotta people, But it seems the good they die young, You know I just looked around, And he&#39;s gone, Has anybody here, Seen my old friend John, Can you tell</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程3-3</title>
      <link>https://luangeng.space/post/english/3-3/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/3-3/</guid>
      <description>The song you are about to hear is all about a &amp;quot;Saturday Night Special&amp;quot;. Listen and see if you can guess what a Saturday Night Special is. Saturday Night Special Lynyrd Skynyrd Two feets they come a-creepin&#39; Like a black cat do. Two bodies a-laying restless, Creeper thinks he&#39;s got nothing to lose. So he creeps into the house, yea, Unlocks the door, And as the man&#39;s reachin&#39; for his</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程3-4</title>
      <link>https://luangeng.space/post/english/3-4/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/3-4/</guid>
      <description>Every child likes listening to stories. Zoe, a girl with wings, is no exception. Listen carefully and see what story her father is going to tell her. &amp;quot;Now, Zoe, stop fluttering around, and I will tell you a story.&amp;quot; &amp;quot;A true story, papa?&amp;quot; &amp;quot;It all happened exactly as I&#39;m going to tell you. Two thousand and eleven years ago in 1985, a tribe of beings from the Dog Star invaded</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程3-5</title>
      <link>https://luangeng.space/post/english/3-5/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/3-5/</guid>
      <description>To begin with, let&#39;s listen to a song called There&#39;s No Place Like Home for the Holidays. There&#39;s No Place Like Home For The Holidays Perry Como Oh, there&#39;s no place like home for the holidays &#39;Cause no matter how far away you roam When you pine for the sunshine of a friendly gaze For the holidays you can&#39;t beat home sweet home I met a man who lives in</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程3-6</title>
      <link>https://luangeng.space/post/english/3-6/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/3-6/</guid>
      <description>The song you are about to hear was first performed at a concert given to raise money to fight against poverty in Africa. Its message is simple, &amp;quot;There are people dying and it is time to help, to lend a hand. It&#39;s no use pretending that someone somewhere will do it for us. So let&#39;s start giving to those with less than ourselves.&amp;quot; The message is clear. The song sings</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程3-7</title>
      <link>https://luangeng.space/post/english/3-7/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/3-7/</guid>
      <description>The song you are about to hear came about through a chance meeting. The singer, Donna Summer, was having a meal with her manager in an expensive restaurant in the plush Beverly Hills area of Los Angeles. As Donna tells the story: &amp;quot;I went into the ladies, and saw one of the waitresses sleeping on a stool1, absolutely exhausted from lack of sleep,&amp;quot; she says. &amp;quot;I woke the lady up</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程3-8</title>
      <link>https://luangeng.space/post/english/3-8/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/3-8/</guid>
      <description>A Clone of Our Own Will humans be the next clones? The technology still has a long way to go before it&#39;s considered safe to try on humans. But even if it were safe, would it be right? Let&#39;s hear what Professor Hank Greely of Standford University has to say on this topic. Interviewer: When will we clone a human? Greely: That&#39;s not a simple question. I think we have</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程4-1</title>
      <link>https://luangeng.space/post/english/4-1/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/4-1/</guid>
      <description>They say that pride comes before a fall. In the case of both Napoleon and Hitler, the many victories they enjoyed led them to believe that anything was possible, that nothing could stand in their way. Russia&#39;s icy defender was to prove them wrong. 人道是骄兵必败。就拿拿破仑和希特勒两人来说吧，他们所</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程4-2</title>
      <link>https://luangeng.space/post/english/4-2/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/4-2/</guid>
      <description>Smart cars that can see, hear, feel, smell, and talk? And drive on their own? This may sound like a dream, but the computer revolution is set to turn it into a reality. 能看、能听、有知觉、具嗅觉、会说话的智能汽车？还能自动驾驶？这听起来或许像</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程4-3</title>
      <link>https://luangeng.space/post/english/4-3/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/4-3/</guid>
      <description>Harvey Mackay, who runs his own company, often interviews applicants for jobs. Here he lets us into the secret of what qualities an employer is looking for, and gives four tips on what can help you to stand out from the crowd. 自己经营公司的哈维·麦凯经常对求职者进行面试。文中他告诉</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程4-4</title>
      <link>https://luangeng.space/post/english/4-4/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/4-4/</guid>
      <description>Is America going to decline like other great nations have before? The author thinks not, arguing that the type of society being created in America is quite unlike any that has gone before it. Read what he has to say and see whether you agree. 美国是否会如同历史上其他强国一样走向衰亡？作者持否</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程4-5</title>
      <link>https://luangeng.space/post/english/4-5/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/4-5/</guid>
      <description>Some people seem easy to understand: their character appears obvious on first meeting. Appearances, however, can be deceptive1. 有些人似乎容易了解：他们的个性在初次交往时就表露无遗。然而，外表可能具有欺骗性。 A Friend in Need Somerset Maugham 1 For thirty years now I</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程4-6</title>
      <link>https://luangeng.space/post/english/4-6/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/4-6/</guid>
      <description>As the pace of life in today&#39;s world grows ever faster, we seem forever on the go. With so much to do and so little time to do it in, how are we to cope? Richard Tomkins sets about untangling the problem and comes up with an answer. 随着当今世界生活节奏日益加快，我们似乎一直在</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程4-7</title>
      <link>https://luangeng.space/post/english/4-7/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/4-7/</guid>
      <description>Peggy Noonan lives in New York and writes a weekly column for The Wall Street Journal. This piece is taken from one of them. In it she reflects on her week and on life in the city. Writing less than a year away from the destruction of the World Trade Center, her thoughts are inevitably affected by that terrible event. 佩吉·诺南住在纽约，</description>
    </item>
    
    <item>
      <title>全新版大学英语综合教程4-8</title>
      <link>https://luangeng.space/post/english/4-8/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/english/4-8/</guid>
      <description>Annie Dillard tells of her visit to the Napo River in the heart of the Ecuadorian jungle, one of nature&#39;s most unspoiled places. She describes the beauty of the forest and her admiration for the people who live there. 安妮·迪拉德讲述了自己游览厄瓜多尔丛林深处的纳波河的经历。那是</description>
    </item>
    
    <item>
      <title>OpenCV 绘制图像直方图</title>
      <link>https://luangeng.space/post/other/opencv1/</link>
      <pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/opencv1/</guid>
      <description>OpenCV绘制图像直方图，版本2.4.11 直方图可展示图像中的像素分布,是用以表示数字图像中亮度分布的直方图，标绘了图像中每个亮度值的像素</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA常用快捷键</title>
      <link>https://luangeng.space/post/other/idea-key/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/idea-key/</guid>
      <description>Mac: 符号说明 ⌃ Control键 ⌥ Option键 ⌘ Command键 ⇧ 大写锁定键 ↩ 回车键 ⌫ BackSpace键 ⎋ Escape (Esc) ⌦ 向前删除键(Fn+Delet</description>
    </item>
    
    <item>
      <title>ubuntu16.04 安装 mysql5.7</title>
      <link>https://luangeng.space/post/db/mysql/mysql/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/db/mysql/mysql/</guid>
      <description>ubuntu16.04 安装 mysql5.7 ，并配置远程访问 安装mysql及其可选组件 apt-get install mysql-server apt-get install mysql-client apt-get install libmysqlclient-dev apt-get install mysql-workbench-community apt-get install mysql-connector-python 查看是否安装成功 shell&amp;gt;netstat -tap | grep mysqld mysql在安装完成后自动启动，r</description>
    </item>
    
    <item>
      <title>两个线程交替打印奇数和偶数</title>
      <link>https://luangeng.space/post/java/basic/oddeven/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/oddeven/</guid>
      <description>两个线程交替打印奇数和偶数，即一个线程打印奇数，另一个打印偶数，交替打印从1到100,即： 奇 1 偶 2 奇 3 偶 4 奇 5 偶 6 奇 7 偶 8 奇 9 偶 10 解法一： w</description>
    </item>
    
    <item>
      <title>反转单向链表</title>
      <link>https://luangeng.space/post/java/exe/reverseList/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/exe/reverseList/</guid>
      <description>1.请先实现一个单向链表 public class MyLinkedList { private static class Node { int value; Node next; public Node(int value) { this.value = value; } } private Node head; private int size = 0; //FILO public void push(int v) { size++; if (head == null) { head = new Node(v); } else { Node node = new Node(v); node.next = head; head</description>
    </item>
    
    <item>
      <title>反转字符串中每一个单词</title>
      <link>https://luangeng.space/post/java/exe/string-reverse-word/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/exe/string-reverse-word/</guid>
      <description>反转字符串中每一个单词 public class StringTest { //反转每个单词 private static String reverseEveryWord(String str) { StringBuilder sb = new StringBuilder(); StringBuilder word = new StringBuilder(); for (char c : str.toCharArray()) { if (isLetter(c)) { word.append(c); } else { if (word.length() &amp;gt; 0) { sb.append(word.reverse().toString()); word.delete(0, word.length()); } sb.append(c); } } return sb.toString(); } private static boolean</description>
    </item>
    
    <item>
      <title>将字符串中所有单词的首字母大写</title>
      <link>https://luangeng.space/post/java/exe/string-caption/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/exe/string-caption/</guid>
      <description>public class StringTest { // 首字母大写 private static String upper(String str) { boolean first = true; StringBuilder sb = new StringBuilder(); for (char c : str.toCharArray()) { if (first) { sb.append(Character.toUpperCase(c)); first = false; } else { sb.append(c); } if (Character.isWhitespace(c)) { first = true; } } return sb.toString(); } public static void main(String[] args) { char c = 20; System.out.println(&amp;quot;[&amp;quot; + c + &amp;quot;]&amp;quot;); String</description>
    </item>
    
    <item>
      <title>线程死锁</title>
      <link>https://luangeng.space/post/java/basic/deadlock/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/deadlock/</guid>
      <description>会导致死锁的代码： public class DeadLock extends Thread { private Object lock1; private Object lock2; public DeadLock(Object o1, Object o2) { this.lock1 = o1; this.lock2 = o2; } public void run() { synchronized (lock1) { try { TimeUnit.MILLISECONDS.sleep(500); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (lock2) { Q.p(&amp;quot;end&amp;quot;); } } } public static void main(String[] args) { Object o1 = new Object(), o2</description>
    </item>
    
    <item>
      <title>struts2 &#43; spring &#43; mybatis 框架整合</title>
      <link>https://luangeng.space/post/java/struts/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/struts/</guid>
      <description>在Eclipse下基于Maven整合Struts2，Spring和Mybatis3框架。 新建Maven project，type选择webap</description>
    </item>
    
    <item>
      <title>git基础命令</title>
      <link>https://luangeng.space/post/other/git-base/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/git-base/</guid>
      <description>初始设置： git config --global user.name &amp;quot;username&amp;quot; 查看/设置用户名 git config --global user.email &amp;quot;email&amp;quot; 查看/设置邮箱 初始化本地库，关联远程库： git init 把当前的目录变成由git管理的仓库，生成隐藏的.g</description>
    </item>
    
    <item>
      <title>git撤销</title>
      <link>https://luangeng.space/post/other/git-undo/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/git-undo/</guid>
      <description>修改上一次错误的提交：(适用于未push的commit): git commit &amp;ndash;amend 用于对最新一次提交进行撤回，以修补错误(提交说明或者文件)，该操作会撤回并删</description>
    </item>
    
    <item>
      <title>Java动态代理</title>
      <link>https://luangeng.space/post/java/basic/java-proxy/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-proxy/</guid>
      <description>代理模式：为某些对象提供代理以实现对这个对象的访问。 对一个对象进行访问控制的原因是为了只有在我们确实需要这个对象时才对它进行创建和初始化。 一</description>
    </item>
    
    <item>
      <title>Java基础--NIO</title>
      <link>https://luangeng.space/post/java/basic/java-nio/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-nio/</guid>
      <description>NIO库在JDK1.4中引入，它以标准Java代码提供了高速的，面向块的IO，弥补了之前同步IO的不足。 缓冲区Buffer Buffers是一</description>
    </item>
    
    <item>
      <title>Java并发--CountDownLatch CyclicBarrier ReentrantLock</title>
      <link>https://luangeng.space/post/java/basic/java-locks/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-locks/</guid>
      <description>CountDownLatch CountDownLatch是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。CountDownLatch</description>
    </item>
    
    <item>
      <title>Java--两个线程交替执行和死锁</title>
      <link>https://luangeng.space/post/java/basic/java-oddeven/</link>
      <pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-oddeven/</guid>
      <description>今天看到一个题：两个线程交替打印奇数和偶数，即一个线程打印奇数，另一个打印偶数，交替打印从1到100。想了下有多重实现方法。 wait和not</description>
    </item>
    
    <item>
      <title>Java基础--JDBC</title>
      <link>https://luangeng.space/post/java/basic/java-jdbc/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-jdbc/</guid>
      <description>JDBC(Java Database Connectivity) Java数据库连接，提供了一种与平台无关的用于执行SQL语句的标准javaAPI，可以方便实现多种关系型数据库的统一操作 常用的类与接口</description>
    </item>
    
    <item>
      <title>Java基础--注解Annotation</title>
      <link>https://luangeng.space/post/java/basic/java-annotation/</link>
      <pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-annotation/</guid>
      <description>Annotation是给类，方法或域上加的一种特殊的标记，可以通过反射取到注解的类型和值，从而完成某种特定的操作。 定义注解需要使用元注解，元</description>
    </item>
    
    <item>
      <title>Java基础--内部类</title>
      <link>https://luangeng.space/post/java/basic/java-innerclass/</link>
      <pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-innerclass/</guid>
      <description>普通内部类 如果一个类只需要在另一个类内部使用，可以考虑将它写成内部类。 内部类拥有其外部类所有成员的访问权，因为内部类中隐含了一个外部类的引用</description>
    </item>
    
    <item>
      <title>Java基础--比较器Comparator</title>
      <link>https://luangeng.space/post/java/basic/java-comparator/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-comparator/</guid>
      <description>Comparable接口和Comparator接口都是用来定义集合中的排序的，只是Comparable是在集合内部定义排序的实现，Compa</description>
    </item>
    
    <item>
      <title>Java基础--CountDownLatch</title>
      <link>https://luangeng.space/post/java/basic/java-countdownlatch/</link>
      <pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-countdownlatch/</guid>
      <description>CountDownLatch是线程同步辅助类，它允许一个或多个线程wait直到countdown被调用使count为0。 CountDownL</description>
    </item>
    
    <item>
      <title>Java基础--虚拟机JVM</title>
      <link>https://luangeng.space/post/java/basic/java-jvm/</link>
      <pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-jvm/</guid>
      <description>JVM内存结构 Heap Space： 堆内存(Heap Space)是由Young Generation和Old Generation组成，而Young Ge</description>
    </item>
    
    <item>
      <title>Java-压缩解压gz</title>
      <link>https://luangeng.space/post/java/basic/java-blockingqueue/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-blockingqueue/</guid>
      <description>ArrayBlockingQueue是阻塞队列的一种，基于数组实现，长度固定，队尾添加，队首获取， 构造函数： ArrayBlockingQueue(int capacity) ArrayBlockingQueue(int capacity, boolean fair) ArrayBlockingQueue(int capacity, boolean fair, Collection&amp;lt;? extends E&amp;gt; c) 其中</description>
    </item>
    
    <item>
      <title>Java基础--反射Reflection</title>
      <link>https://luangeng.space/post/java/basic/java-reflection/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-reflection/</guid>
      <description>反射能在运行时获取一个类的全部信息，并且可以调用类方法，修改类属性，创建类实例。 而在编译期间不用关心对象是谁 反射可用在动态代理，注解解释，和</description>
    </item>
    
    <item>
      <title>Java基础--读写文件</title>
      <link>https://luangeng.space/post/java/basic/java-clone/</link>
      <pubDate>Sun, 08 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-clone/</guid>
      <description>对象拷贝用于在内存中复制对象，无需构造器便可创建对象。 需要注意的是 clone方法提供的只是简单的值拷贝和地址拷贝，若类中包含HashMap等</description>
    </item>
    
    <item>
      <title>Java基础--HashCode</title>
      <link>https://luangeng.space/post/java/basic/java-hashcode/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-hashcode/</guid>
      <description>如果一个类的对象要用做hashMap的key，那么一定要注意覆盖该类的equals和hashCode方法。 equals()是基类Object</description>
    </item>
    
    <item>
      <title>Java基础--序列化Serializable</title>
      <link>https://luangeng.space/post/java/basic/java-serializable/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-serializable/</guid>
      <description>对Java对象序列化的目的是持久化对象或者为RMI(远程方法调用)传递参数和返回值。 下面是一个序列化对象写入文件的例子： package utils; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException;</description>
    </item>
    
    <item>
      <title>Java基础--单例类</title>
      <link>https://luangeng.space/post/java/basic/java-singleton/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-singleton/</guid>
      <description>单例模式的主要作用是保证在Java程序中，某个类只有一个实例存在。单例模式有很多好处，它能够避免实例对象的重复创建，不仅可以减少每次创建对象</description>
    </item>
    
    <item>
      <title>Java基础--ThreadLocal</title>
      <link>https://luangeng.space/post/java/basic/java-threadlocal/</link>
      <pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-threadlocal/</guid>
      <description>Java中的ThreadLocal 可以看做以线程标识为key的Map，在多线程开发中应用广泛。 示例 class ThreadEnv { // 用匿名内部类覆盖ThreadLoc</description>
    </item>
    
    <item>
      <title>Java基础--读写文件</title>
      <link>https://luangeng.space/post/java/basic/java-io/</link>
      <pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-io/</guid>
      <description>Java读写文件需要注意异常的处理 写文件 public class WriteFile { public static void write(String file, String text){ try{ PrintWriter out = new PrintWriter(new File(file).getAbsoluteFile()); try{ out.print(text); }finally{ out.close(); } }catch(IOException e){ throw new RuntimeException(e); } } public static void main(String[] args) throws IOException{ String file = &amp;quot;test.txt&amp;quot;; //print current path System.out.println(new File(&amp;quot;&amp;quot;).getAbsolutePath()); String context = &amp;quot;i</description>
    </item>
    
    <item>
      <title>Java基础--压缩和解压缩gz包</title>
      <link>https://luangeng.space/post/java/basic/java-gz/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-gz/</guid>
      <description>gz是Linux和OSX中常见的压缩文件格式，下面是用java压缩和解压缩gz包的例子 public class GZIPcompress { public static void FileCompress(String file, String outgz) throws IOException { BufferedReader br = new BufferedReader(new FileReader(file)); BufferedOutputStream bs = new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(outgz)));</description>
    </item>
    
    <item>
      <title>Java基础--枚举Enum</title>
      <link>https://luangeng.space/post/java/basic/java-enum/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-enum/</guid>
      <description>Java中的枚举是一种特殊的类，可以将一组固定常量的集合组成一种类型，使用方便且类型安全。使用enum关键字定义。 enum类型父类为Enum</description>
    </item>
    
  </channel>
</rss>