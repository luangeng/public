<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 计算机与软件技术公开课</title>
    <link>https://luangeng.space/categories/Java/</link>
    <description>Recent content in Java on 计算机与软件技术公开课</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2018. All rights reserved.</copyright>
    <lastBuildDate>Wed, 05 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://luangeng.space/categories/Java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>爬取电影信息使用Elasticsearch检索</title>
      <link>https://luangeng.space/post/other/elasticsearch-douban/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/elasticsearch-douban/</guid>
      <description>爬虫代码源于网络,修改其中的数据库操作为ES数据访问. 实体类: 爬取记录: @Data public class Record { public static final String TYPE_MOVIE = &amp;quot;Movie&amp;quot;; public static final String TYPE_COMMENT = &amp;quot;Comment&amp;quot;; public static final String TYPE_OTHER = &amp;quot;Other&amp;quot;; public static final int STATUS_UNCRAWLED = 0; public</description>
    </item>
    
    <item>
      <title>elasticsearch JAVA API</title>
      <link>https://luangeng.space/post/other/elasticsearch-api/</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/elasticsearch-api/</guid>
      <description>@Service public class DocApi implements Const { @Autowired RestHighLevelClient client; public void info() throws IOException { MainResponse response = client.info(RequestOptions.DEFAULT); ClusterName clusterName = response.getClusterName(); String clusterUuid = response.getClusterUuid(); String nodeName = response.getNodeName(); Version version = response.getVersion(); Build build = response.getBuild(); } public IndexResponse index(int n) throws IOException { IndexRequest request = new IndexRequest(INDEX, TYPE, &amp;quot;1&amp;quot;) .source(&amp;quot;user&amp;quot;, &amp;quot;kimchy&amp;quot;, &amp;quot;postDate&amp;quot;, new Date(), &amp;quot;message&amp;quot;, &amp;quot;trying out Elasticsearch&amp;quot;); IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT); // client.</description>
    </item>
    
    <item>
      <title>elasticsearch入门教程</title>
      <link>https://luangeng.space/post/other/elasticsearch/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/elasticsearch/</guid>
      <description>ElasticSearch是全文搜索最常见的开源工具，它支持快速存储，检索大量数据。 基本概念: Node 与 Cluster Elastic 本质上是一个分布式数据库，允许多台服务</description>
    </item>
    
    <item>
      <title>SpringBoot集成ZeroMQ</title>
      <link>https://luangeng.space/post/other/zeromq-springboot/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/zeromq-springboot/</guid>
      <description>开发ZeroMQ的SpringBoot Starter。 resources中META-INF中增加文件spring.factories： org.springframework.boot.autoconfigure.EnableAutoConfiguration=net.ytoframework.plugin.zeromq.ZeroMQAutoConfiguration 配置</description>
    </item>
    
    <item>
      <title>集成通过github登录网站功能</title>
      <link>https://luangeng.space/post/other/github_login/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/github_login/</guid>
      <description>使用第三方网址登录系统，使用github 工作流程： 页面点击使用github登录， 重定向到回调地址 回调地址后台获取token，获取用户信息，完</description>
    </item>
    
    <item>
      <title>SpringBoot集成elastic-job-lite</title>
      <link>https://luangeng.space/post/other/elasticJob/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/elasticJob/</guid>
      <description>SpringBoot集成elastic-job-lite 1.pom文件中引用jar包 &amp;lt;!-- elastic-job-lite --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-common-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-lite-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.dangdang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elastic-job-lite-spring&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;18.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2.本地启</description>
    </item>
    
    <item>
      <title>spring-security-oauth2 授权服务集成钉钉扫码登录</title>
      <link>https://luangeng.space/post/other/dingding/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/dingding/</guid>
      <description>spring boot版本 &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.2.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; spring-security-oauth2版本 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security.oauth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-oauth2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 实现原理： 参照spring-security</description>
    </item>
    
    <item>
      <title>Netty--使用TCP协议传输文件</title>
      <link>https://luangeng.space/post/java/netty/netty-file/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-file/</guid>
      <description>简介： 用于将文件通过TCP协议传输到另一台机器，两台机器需要通过网络互联。 实现： 使用Netty进行文件传输，服务端读取文件并将文件拆分为多个</description>
    </item>
    
    <item>
      <title>Netty--RPC的原理和实现</title>
      <link>https://luangeng.space/post/java/netty/netty-rpc/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-rpc/</guid>
      <description>RPC(Remote Procedure Call)远程过程调用，是通过网络调用远程计算机进程中的某个方法，从而达到获取和传递数据或状态的实现，调用风格就如同调用本地的方法一样。</description>
    </item>
    
    <item>
      <title>Netty--Google Protobuf编解码</title>
      <link>https://luangeng.space/post/java/netty/netty-protobuf/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-protobuf/</guid>
      <description>Google Protobuf是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储</description>
    </item>
    
    <item>
      <title>Netty--JDK序列化编解码传输对象</title>
      <link>https://luangeng.space/post/java/netty/netty-jdk/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-jdk/</guid>
      <description>使用JDK序列化不需要额外的类库，只需要实现Serializable即可，但是序列化之后的码流只有Java才能反序列化，所以它不是跨语言的，</description>
    </item>
    
    <item>
      <title>Netty--HTTP服务器原理和实现</title>
      <link>https://luangeng.space/post/java/netty/netty-http/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-http/</guid>
      <description>基于Netty的HTTP协议栈可以方便的进行异步非阻塞的HTTP服务器的开发。 当在浏览器中输入一个指向特定网页的URL时，浏览器就会生成一个</description>
    </item>
    
    <item>
      <title>Netty--TCP粘包和拆包</title>
      <link>https://luangeng.space/post/java/netty/netty-tcpdecoder/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-tcpdecoder/</guid>
      <description>TCP协议以流的方式进行数据传输，它无法理解其上层协议的数据意义，而是根据TCP缓冲区的大小对数据进行拆分或组装，即上层一个完整的包可能被拆</description>
    </item>
    
    <item>
      <title>Netty--TCP协议发送和接收数据</title>
      <link>https://luangeng.space/post/java/netty/netty-tcp/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-tcp/</guid>
      <description>Netty是业界最流行的NIO开发框架，使用Netty可以构建高性能异步通信能力，经常用于RPC底层通信框架。Netty的API使用简单，功</description>
    </item>
    
    <item>
      <title>Netty--简单实现一个Servlet容器</title>
      <link>https://luangeng.space/post/java/netty/netty-servlet/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/netty/netty-servlet/</guid>
      <description>Servlet(Server Applet)是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语</description>
    </item>
    
    <item>
      <title>Spring Cloud Bus-RabbitMQ</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-rabbitmq/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-rabbitmq/</guid>
      <description>Spring Cloud Bus将分布式系统中各节点通过轻量级消息代理连接起来。 从而实现例如广播状态改变(例如配置改变)或其他的管理指令。 目前唯一的实现是使用AM</description>
    </item>
    
    <item>
      <title>RocketMQ核心概念</title>
      <link>https://luangeng.space/post/other/rocketMq-Concept/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/rocketMq-Concept/</guid>
      <description>Producer A producer sends messages generated by the business application systems to brokers. RocketMQ provides multiple paradigms of sending: synchronous, asynchronous and one-way. 生产者将业务应用程序系统生成的消息发送给broker。RocketMQ提供多种发送范例：同步，</description>
    </item>
    
    <item>
      <title>Spring Cloud Zuul 网关</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-zuul/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-zuul/</guid>
      <description>Spring Cloud 服务网关Zuul 服务网关是分布式架构中不可缺少的组成部分，是外部网络和内部服务之间的屏障，例如权限控制之类的逻辑应该在这里实现，而不是放</description>
    </item>
    
    <item>
      <title>Spring MVC中Action使用总结</title>
      <link>https://luangeng.space/post/java/spring/springmvc/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/springmvc/</guid>
      <description>Spring MVC中每个控制器中可以定义多个请求处理方法即Action，Action可以有多个不同的参数，有多种类型的返回结果。 可以作为Action的</description>
    </item>
    
    <item>
      <title>Spring Cloud 断路器 Hystrix</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-hystrix/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-hystrix/</guid>
      <description>断路器 断路器就像电路中的断路器一样，当短路发生时，它第一时刻熔断，切断了故障电路，保护其他用电单元。 在分布式架构中，断路器的作用类似，当某个</description>
    </item>
    
    <item>
      <title>zookeeper-分布式锁和消息队列</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-lock/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-lock/</guid>
      <description>在java并发包中提供了若干锁的实现，它们是用于单个java虚拟机进程中的；而分布式锁能够在一组进程之间提供互斥机制，保证在任何时刻只有一个</description>
    </item>
    
    <item>
      <title>Spring Cloud Config 配置服务</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-eureka/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-eureka/</guid>
      <description>spring cloud 配置服务提供了一种非常方便的应用配置管理功能，用来解决分布式系统中配置文件太多导致的各种问题，而它自身的配置也非常简单。 服务端用来从gi</description>
    </item>
    
    <item>
      <title>zookeeper-集群管理</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-cluster/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-cluster/</guid>
      <description>Zookeeper&amp;ndash;集群管理 在多台服务器组成的集群中，需要监控每台服务器的状态，一旦某台服务器挂掉了或有新的机器加入集群，集群都</description>
    </item>
    
    <item>
      <title>Spring Cloud Eureka 注册，发布，调用服务</title>
      <link>https://luangeng.space/post/java/spring/spring-cloud-config/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-cloud-config/</guid>
      <description>Spring Cloud为服务治理做了一层抽象接口，所以在Spring Cloud应用中可以支持多种不同的服务治理框架，如Netflix Eureka、Co</description>
    </item>
    
    <item>
      <title>zookeeper-配置服务</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-config/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-config/</guid>
      <description>Zookeeper&amp;ndash;配置服务 配置服务是分布式应用中重要的服务，作用是使集群中的机器可以共享配置信息中公共的部分。ZooKeepe</description>
    </item>
    
    <item>
      <title>Spring Boot发布和调用RESTful web service</title>
      <link>https://luangeng.space/post/java/spring/spring-ws/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-ws/</guid>
      <description>Spring Boot可以非常简单的发布和调用RESTful web service，下面参考官方指导体验一下 1.首先访问 http://start.spring.io/ 生成Spring Boot基础项目 或者</description>
    </item>
    
    <item>
      <title>zookeeper-Watcher</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-watch/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-watch/</guid>
      <description>Zookeeper&amp;ndash;Watcher 和 ACL Watcher (观察) Zookeeper中的znode可以被监控，这是zk的核心特性。 通过exists，getChildren和getData这些</description>
    </item>
    
    <item>
      <title>zookeeper-Java API</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-java/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-java/</guid>
      <description>Zookeeper&amp;ndash;Java API及示例 zk客户端要连接zk服务器，首先需要创建org.apache.zookeeper.ZooKeeper的一个实例对象，然后调用该</description>
    </item>
    
    <item>
      <title>使用Spring Boot 和Spring Data JPA访问mysql数据库</title>
      <link>https://luangeng.space/post/java/spring/spring-jpa/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-jpa/</guid>
      <description>在Spring中使用JdbcTemplate是一种基本的数据访问方式，但是仍然需要较多的代码，为了解决这些大量枯燥的数据操作语句，我们可以使</description>
    </item>
    
    <item>
      <title>Spring Boot 集成Swagger2生成RESTful API文档</title>
      <link>https://luangeng.space/post/java/spring/spring-swagger/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-swagger/</guid>
      <description>Swagger2可以在写代码的同时生成对应的RESTful API文档，方便开发人员参考，另外Swagger2也提供了强大的页面测试功能来调试</description>
    </item>
    
    <item>
      <title>zookeeper-安装及命令</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-cmd/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-cmd/</guid>
      <description>Zookeeper&amp;ndash;单机模式安装 及命令 下载地址： http://zookeeper.apache.org/releases.html tar -zxvf zookeeper-3.4.10.tar.gz mv zookeeper-3.4.10 /Users/LG/tools/zookeeper-3.4.10 cd /Users/LG/tools/zookeeper-3.4.10 conf目录下新建配置文件zoo.cfg，内容如下： # The number of milliseconds</description>
    </item>
    
    <item>
      <title>Spring Boot自定义配置与加载</title>
      <link>https://luangeng.space/post/java/spring/spring-rest/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-rest/</guid>
      <description>Spring Boot自定义配置与加载 application.properties主要用来配置数据库连接、日志相关配置等。除了这些配置内容之外，还可以自</description>
    </item>
    
    <item>
      <title>ubuntu16.04安装rocketMQ</title>
      <link>https://luangeng.space/post/other/rocketmq/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/other/rocketmq/</guid>
      <description>本文详细说明如何在ubuntu16.04下安装rocketMQ的步骤。 首先需要打开root权限 sudo -i 下载安装jdk wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz tar -zxvf jdk-8u181-linux-x64.tar.gz mv jdk-8u181-linux-x64 /usr/jdk 配置JAVA</description>
    </item>
    
    <item>
      <title>zookeeper-基本概念</title>
      <link>https://luangeng.space/post/java/zookeeper/zookeeper-base/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/zookeeper/zookeeper-base/</guid>
      <description>介绍 ZooKeeper是用于分布式系统的高性能协调服务，通过简单的接口提供了命名服务，配置管理，同步和组服务等常用服务。 ZooKeeper是</description>
    </item>
    
    <item>
      <title>一文看懂@RequestBody,@RequestParam和@PathVariable</title>
      <link>https://luangeng.space/post/java/spring/spring-annotation/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/spring/spring-annotation/</guid>
      <description>在使用SpringMVC或Spring Boot开发后台应用的使用，经常需要从前台传值到后台，后台返回数据和页面到前台，而碰到最多的就是Spr</description>
    </item>
    
    <item>
      <title>CXF拦截器介绍及自定义拦截器实现</title>
      <link>https://luangeng.space/post/java/cxf-interceptor/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/cxf-interceptor/</guid>
      <description>CXF拦截器是功能的主要实现单元，也是主要的扩展点，可以在不对核心模块进行修改的情况下，动态添加功能。 当服务被调用时，会经过多个拦截器链(I</description>
    </item>
    
    <item>
      <title>两个线程交替打印奇数和偶数</title>
      <link>https://luangeng.space/post/java/basic/oddeven/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/oddeven/</guid>
      <description>两个线程交替打印奇数和偶数，即一个线程打印奇数，另一个打印偶数，交替打印从1到100,即： 奇 1 偶 2 奇 3 偶 4 奇 5 偶 6 奇 7 偶 8 奇 9 偶 10 解法一： w</description>
    </item>
    
    <item>
      <title>线程死锁</title>
      <link>https://luangeng.space/post/java/basic/deadlock/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/deadlock/</guid>
      <description>会导致死锁的代码： public class DeadLock extends Thread { private Object lock1; private Object lock2; public DeadLock(Object o1, Object o2) { this.lock1 = o1; this.lock2 = o2; } public void run() { synchronized (lock1) { try { TimeUnit.MILLISECONDS.sleep(500); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (lock2) { Q.p(&amp;quot;end&amp;quot;); } } } public static void main(String[] args) { Object o1 = new Object(), o2</description>
    </item>
    
    <item>
      <title>struts2 &#43; spring &#43; mybatis 框架整合</title>
      <link>https://luangeng.space/post/java/struts/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/struts/</guid>
      <description>在Eclipse下基于Maven整合Struts2，Spring和Mybatis3框架。 新建Maven project，type选择webap</description>
    </item>
    
    <item>
      <title>Java动态代理</title>
      <link>https://luangeng.space/post/java/basic/java-proxy/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-proxy/</guid>
      <description>代理模式：为某些对象提供代理以实现对这个对象的访问。 对一个对象进行访问控制的原因是为了只有在我们确实需要这个对象时才对它进行创建和初始化。 一</description>
    </item>
    
    <item>
      <title>Java基础--NIO</title>
      <link>https://luangeng.space/post/java/basic/java-nio/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-nio/</guid>
      <description>NIO库在JDK1.4中引入，它以标准Java代码提供了高速的，面向块的IO，弥补了之前同步IO的不足。 缓冲区Buffer Buffers是一</description>
    </item>
    
    <item>
      <title>Java并发--CountDownLatch CyclicBarrier ReentrantLock</title>
      <link>https://luangeng.space/post/java/basic/java-locks/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-locks/</guid>
      <description>CountDownLatch CountDownLatch是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。CountDownLatch</description>
    </item>
    
    <item>
      <title>Java--两个线程交替执行和死锁</title>
      <link>https://luangeng.space/post/java/basic/java-oddeven/</link>
      <pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-oddeven/</guid>
      <description>今天看到一个题：两个线程交替打印奇数和偶数，即一个线程打印奇数，另一个打印偶数，交替打印从1到100。想了下有多重实现方法。 wait和not</description>
    </item>
    
    <item>
      <title>Java基础--JDBC</title>
      <link>https://luangeng.space/post/java/basic/java-jdbc/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-jdbc/</guid>
      <description>JDBC(Java Database Connectivity) Java数据库连接，提供了一种与平台无关的用于执行SQL语句的标准javaAPI，可以方便实现多种关系型数据库的统一操作 常用的类与接口</description>
    </item>
    
    <item>
      <title>Java基础--注解Annotation</title>
      <link>https://luangeng.space/post/java/basic/java-annotation/</link>
      <pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-annotation/</guid>
      <description>Annotation是给类，方法或域上加的一种特殊的标记，可以通过反射取到注解的类型和值，从而完成某种特定的操作。 定义注解需要使用元注解，元</description>
    </item>
    
    <item>
      <title>Java基础--内部类</title>
      <link>https://luangeng.space/post/java/basic/java-innerclass/</link>
      <pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-innerclass/</guid>
      <description>普通内部类 如果一个类只需要在另一个类内部使用，可以考虑将它写成内部类。 内部类拥有其外部类所有成员的访问权，因为内部类中隐含了一个外部类的引用</description>
    </item>
    
    <item>
      <title>Java基础--比较器Comparator</title>
      <link>https://luangeng.space/post/java/basic/java-comparator/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-comparator/</guid>
      <description>Comparable接口和Comparator接口都是用来定义集合中的排序的，只是Comparable是在集合内部定义排序的实现，Compa</description>
    </item>
    
    <item>
      <title>Java基础--CountDownLatch</title>
      <link>https://luangeng.space/post/java/basic/java-countdownlatch/</link>
      <pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-countdownlatch/</guid>
      <description>CountDownLatch是线程同步辅助类，它允许一个或多个线程wait直到countdown被调用使count为0。 CountDownL</description>
    </item>
    
    <item>
      <title>Java基础--虚拟机JVM</title>
      <link>https://luangeng.space/post/java/basic/java-jvm/</link>
      <pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-jvm/</guid>
      <description>JVM内存结构 Heap Space： 堆内存(Heap Space)是由Young Generation和Old Generation组成，而Young Ge</description>
    </item>
    
    <item>
      <title>Java-压缩解压gz</title>
      <link>https://luangeng.space/post/java/basic/java-blockingqueue/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-blockingqueue/</guid>
      <description>ArrayBlockingQueue是阻塞队列的一种，基于数组实现，长度固定，队尾添加，队首获取， 构造函数： ArrayBlockingQueue(int capacity) ArrayBlockingQueue(int capacity, boolean fair) ArrayBlockingQueue(int capacity, boolean fair, Collection&amp;lt;? extends E&amp;gt; c) 其中</description>
    </item>
    
    <item>
      <title>Java基础--反射Reflection</title>
      <link>https://luangeng.space/post/java/basic/java-reflection/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-reflection/</guid>
      <description>反射能在运行时获取一个类的全部信息，并且可以调用类方法，修改类属性，创建类实例。 而在编译期间不用关心对象是谁 反射可用在动态代理，注解解释，和</description>
    </item>
    
    <item>
      <title>Java基础--读写文件</title>
      <link>https://luangeng.space/post/java/basic/java-clone/</link>
      <pubDate>Sun, 08 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-clone/</guid>
      <description>对象拷贝用于在内存中复制对象，无需构造器便可创建对象。 需要注意的是 clone方法提供的只是简单的值拷贝和地址拷贝，若类中包含HashMap等</description>
    </item>
    
    <item>
      <title>Java基础--HashCode</title>
      <link>https://luangeng.space/post/java/basic/java-hashcode/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-hashcode/</guid>
      <description>如果一个类的对象要用做hashMap的key，那么一定要注意覆盖该类的equals和hashCode方法。 equals()是基类Object</description>
    </item>
    
    <item>
      <title>Java基础--序列化Serializable</title>
      <link>https://luangeng.space/post/java/basic/java-serializable/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-serializable/</guid>
      <description>对Java对象序列化的目的是持久化对象或者为RMI(远程方法调用)传递参数和返回值。 下面是一个序列化对象写入文件的例子： package utils; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException;</description>
    </item>
    
    <item>
      <title>Java基础--单例类</title>
      <link>https://luangeng.space/post/java/basic/java-singleton/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-singleton/</guid>
      <description>单例模式的主要作用是保证在Java程序中，某个类只有一个实例存在。单例模式有很多好处，它能够避免实例对象的重复创建，不仅可以减少每次创建对象</description>
    </item>
    
    <item>
      <title>Java基础--ThreadLocal</title>
      <link>https://luangeng.space/post/java/basic/java-threadlocal/</link>
      <pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-threadlocal/</guid>
      <description>Java中的ThreadLocal 可以看做以线程标识为key的Map，在多线程开发中应用广泛。 示例 class ThreadEnv { // 用匿名内部类覆盖ThreadLoc</description>
    </item>
    
    <item>
      <title>Java基础--读写文件</title>
      <link>https://luangeng.space/post/java/basic/java-io/</link>
      <pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-io/</guid>
      <description>Java读写文件需要注意异常的处理 写文件 public class WriteFile { public static void write(String file, String text){ try{ PrintWriter out = new PrintWriter(new File(file).getAbsoluteFile()); try{ out.print(text); }finally{ out.close(); } }catch(IOException e){ throw new RuntimeException(e); } } public static void main(String[] args) throws IOException{ String file = &amp;quot;test.txt&amp;quot;; //print current path System.out.println(new File(&amp;quot;&amp;quot;).getAbsolutePath()); String context = &amp;quot;i</description>
    </item>
    
    <item>
      <title>Java基础--压缩和解压缩gz包</title>
      <link>https://luangeng.space/post/java/basic/java-gz/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-gz/</guid>
      <description>gz是Linux和OSX中常见的压缩文件格式，下面是用java压缩和解压缩gz包的例子 public class GZIPcompress { public static void FileCompress(String file, String outgz) throws IOException { BufferedReader br = new BufferedReader(new FileReader(file)); BufferedOutputStream bs = new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(outgz)));</description>
    </item>
    
    <item>
      <title>Java基础--枚举Enum</title>
      <link>https://luangeng.space/post/java/basic/java-enum/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luangeng.space/post/java/basic/java-enum/</guid>
      <description>Java中的枚举是一种特殊的类，可以将一组固定常量的集合组成一种类型，使用方便且类型安全。使用enum关键字定义。 enum类型父类为Enum</description>
    </item>
    
  </channel>
</rss>